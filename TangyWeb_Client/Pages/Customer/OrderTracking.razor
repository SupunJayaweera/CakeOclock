@page "/tracking"


@using TangyWeb_Client.Serivce
@using Tangy_Business.Repository.IRepository

@inject IOrderService _orderService
@inject NavigationManager _navigationManager
@* @inject AuthenticationState _user *@
@inject IJSRuntime _jsRuntime

<div>
    <h4 class="card-title text-info">Order's List</h4>
    @if (OrderHeaders.Any())
    {
        <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Advanced" PageSize="8" AllowPaging="true" AllowSorting="true"
                        Data="OrderHeaders" TItem="OrderHeaderDTO" LogicalFilterOperator="LogicalFilterOperator.Or">
            <Columns>
                <RadzenDataGridColumn TItem="OrderHeaderDTO" Property="Id" Filterable="false" Title="ID" SortOrder="Radzen.SortOrder.Descending" Frozen="true" />
                <RadzenDataGridColumn TItem="OrderHeaderDTO" Property="Name" Title="Name" />
                <RadzenDataGridColumn TItem="OrderHeaderDTO" Property="PhoneNumber" Title="Phone" />
                @* <RadzenDataGridColumn TItem="OrderHeaderDTO" Property="Email" Title="Email" /> *@
                <RadzenDataGridColumn TItem="OrderHeaderDTO" Property="OrderTotal" Title="Total" />
                <RadzenDataGridColumn TItem="OrderHeaderDTO" Property="OrderDate" Title="Order Date" FormatString="{0:d}" />
                <RadzenDataGridColumn TItem="OrderHeaderDTO" Property="Status" Title="Status" />
              

            </Columns>
        </RadzenDataGrid>


    }
    else
    {
        if (IsLoading)
        {
            //loading gif
            <div class="text-center">
                <img src="/images/loader.gif">
            </div>
        }
    }
</div>

@code {
    
    private IEnumerable<OrderHeaderDTO> OrderHeaders { get; set; } = new List<OrderHeaderDTO>();
    private bool IsLoading { get; set; } = false;

    private string LoggedInUserPhoneNumber { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadOrders();
        }
    }

    private async Task LoadOrders()
    {
        

        IsLoading = true;
        StateHasChanged();
        // var User = await _user.GetAuthenticationStateAsync();
        var Orders = await _orderService.GetAllLoaded();
        OrderHeaders = Orders.Select(u => u.OrderHeader);
        IsLoading = false;
        StateHasChanged();
     
    }

}