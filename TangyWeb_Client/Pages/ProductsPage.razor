@page "/ProductsPage"
@inject IProductService _productService

@if (IsProcessing)
{
    <div style="position: fixed; top: 50%; left: 50%; margin-top: -50px; margin-left: -100px;">
        <img src="images/ajax-loader.gif" />
    </div>
}
else
{
    <div class="background-container" style="background-image: url('images/bkk.png');">
        <NavMenu />

        <div class="vertical-space"></div>

        <div class="container">

            <div class="image-container">
        <img src="images/wannamake.png" alt="Above Carousel Image" style="width: 40%; max-height: 150px; object-fit: cover;" />
    </div>

    <div class="vertical-space"></div>


    <div class="button-container">
    <a href="/CustomOrder">
        <button class="bake-button">Bake it</button>
    </a>
    </div>

    <style>
    .button-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 10vh;  /* Adjust height if needed */
    }

    .bake-button {
        background-color: whitesmoke; /* Green background */
        border: none; /* No border */
        color: b; /* White text */
        padding: 10px 15px; /* Padding */
        text-align: center; /* Center text */
        text-decoration: none; /* No underline */
        display: inline-block; /* Display as inline block */
        font-size: 16px; /* Font size */
        cursor: pointer; /* Cursor on hover */
        border-radius: 10px; /* Rounded corners */
    }

    .bake-button:hover {
        background-color: crimson; /* Darker green on hover */


    }

    .image-container {
        display: flex;
        justify-content: center;
    }

                .vertical-space {
                    height: 20px; /* Adjust height as needed */
                }
    </style>

            <div class="row pb-3 pt-3 backgroundWhite">
                @foreach (var category in Products.Select(u => u.Category.Name).Distinct())
                {

                    <h2 class="text-success pl-1"><b>@category</b></h2>

                    @foreach (var product in Products.Where(u => u.Category.Name == category))
                    {
                        <div class="col-lg-4 col-md-6 pb-4 filter">
                            <div class="card bg-white rounded shadow-sm" style="border: 1px solid #222;">
                                <div class="card-body pb-1 row">
                                    <div class="col-8 h5">@product.Name</div>
                                    <div class="col-4 text-end">
                                        <span class="text-info h4">
                                            @product.ProductPrices.OrderBy(u => u.Price).FirstOrDefault()?.Price.ToString("c")
                                        </span>
                                    </div>
                                </div>

                                <img class="card-img-top img-fluid d-block mx-auto mb-3" src="@product.ImageUrl" alt="menuitem image">
                                <div class="card-body p-1 px-3 row">
                                    <div class="col-6">
                                        <span class="badge p-2 border w-100 text-dark bg-warning">@product.Category.Name</span>
                                    </div>
                                    <div class="col-6 border-0">
                                        <span class="badge p-2 border w-100 bg-info">@product.Color</span>
                                    </div>
                                    <div class="col-12 pt-2" style="font-size: 13px; text-align: justify;">
                                        <p>@((MarkupString)product.Description)</p>
                                    </div>
                                    <div class="col-12 p-1" style="text-align: center;">
                                        <a href="/details/@product.Id" class="btn btn-dark form-control btn-sm p-2" style="height: 40px;">View Details</a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
        <Footer/>
        </div>
    </div>
}

@code {
    public bool IsProcessing { get; set; } = false;
    public IEnumerable<ProductDTO> Products { get; set; } = new List<ProductDTO>();

    protected override async Task OnInitializedAsync()
    {
        IsProcessing = true;
        Products = await _productService.GetAll();

        IsProcessing = false;
    }
}
