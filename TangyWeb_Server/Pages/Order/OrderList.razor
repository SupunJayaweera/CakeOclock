@page "/orderList"
@using Radzen.Blazor

@inject IOrderRepository _orderRepository
@inject NavigationManager _navigationManager
@inject IJSRuntime _jsRuntime

<_DeleteConfiremation IsParentComponentProcessing="IsLoading" ConfirmationChanged="DeleteOrder"> </_DeleteConfiremation>

<div>
    <h4 class="card-title text-info">Order's List</h4>
    @if (OrderHeaders.Any())
    {
        <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Advanced" PageSize="8" AllowPaging="true" AllowSorting="true"
                        Data="OrderHeaders" TItem="OrderHeaderDTO" LogicalFilterOperator="LogicalFilterOperator.Or">
            <Columns>
                <RadzenDataGridColumn TItem="OrderHeaderDTO" Property="Id" Filterable="false" Title="ID" SortOrder="SortOrder.Descending" Frozen="true" />
                <RadzenDataGridColumn TItem="OrderHeaderDTO" Property="Name" Title="Name" />
                <RadzenDataGridColumn TItem="OrderHeaderDTO" Property="PhoneNumber" Title="Phone" />
                @* <RadzenDataGridColumn TItem="OrderHeaderDTO" Property="Email" Title="Email" /> *@
                <RadzenDataGridColumn TItem="OrderHeaderDTO" Property="OrderTotal" Title="Total">
                    <Template Context="order">
                        @($"Rs. {order.OrderTotal:N2}")
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="OrderHeaderDTO" Property="OrderDate" Title="Order Date" FormatString="{0:d}" />
                <RadzenDataGridColumn TItem="OrderHeaderDTO" Property="Status" Title="Status" />
                <RadzenDataGridColumn TItem="OrderHeaderDTO" Title="Details">
                    <Template Context="data">
                        <RadzenButton Click="(args => OrderDetails(data.Id))" ButtonStyle="ButtonStyle.Success" Icon="info" IconColor="@Colors.White"></RadzenButton>

                    </Template>
                </RadzenDataGridColumn>
                <AuthorizeView Roles="@roleAdmin">
                    <RadzenDataGridColumn TItem="OrderHeaderDTO" Title="Delete">
                        <Template Context="data">

                            <RadzenButton Click="(args => HandleDelete(data.Id))" ButtonStyle="ButtonStyle.Danger" Icon="delete" IconColor="@Colors.White"></RadzenButton>
                        </Template>
                    </RadzenDataGridColumn>
                </AuthorizeView>
            </Columns>
        </RadzenDataGrid>


    }
    else
    {
        if (IsLoading)
        {
            //loading gif
            <div class="text-center">
                <img src="/images/loading.gif">
            </div>
        }
    }
</div>

@code {

    private string roleAdmin = Tangy_Common.SD.Role_Admin;

    private IEnumerable<OrderHeaderDTO> OrderHeaders { get; set; } = new List<OrderHeaderDTO>();
    private bool IsLoading { get; set; } = false;

    private int DeleteOrderId { get; set; } = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadOrders();
        }
    }

    private async Task LoadOrders()
    {
        IsLoading = true;
        StateHasChanged();
        var Orders = await _orderRepository.GetAll();
        OrderHeaders = Orders.Select(u => u.OrderHeader);
        IsLoading = false;
        StateHasChanged();
    }

    private void OrderDetails(int id)
    {
        _navigationManager.NavigateTo("/order/details/" + id);
    }

    private void HandleDelete(int id)
    {
        DeleteOrderId = id;
        _jsRuntime.InvokeVoidAsync("ShowDeleteConfiremationModel");
    }

    private async Task DeleteOrder(bool isConfirmed)
    {
        IsLoading = true;
        if (isConfirmed && DeleteOrderId != 0)
        {
            //delete
            //await Task.Delay(5000);
            await _orderRepository.Delete(DeleteOrderId);
            await LoadOrders(); ;
            await _jsRuntime.InvokeVoidAsync("HideDeleteConfiremationModel");
        }
        IsLoading = false;
    }

}